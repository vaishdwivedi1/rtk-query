import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";

// Define the structure of a Todo object
interface Todo {
  id: number;
  title: string;
  completed: boolean;
}

// Create an RTK Query API slice for todos
export const todoApi = createApi({
  // Unique key to identify this API slice in the Redux store
  reducerPath: "todoApi",

  // Base URL for all API requests
  baseQuery: fetchBaseQuery({ baseUrl: "http://localhost:5137" }),

  // Define tag types used for automatic cache invalidation and refetching
  tagTypes: ["Todo"],

  // Define endpoints for interacting with the API
  endpoints: (builder) => ({
    // GET /todos - Fetch all todos
    getTodos: builder.query<Todo[], void>({
      query: () => "/todos", // API endpoint path
      providesTags: ["Todo"], // Used for cache management
    }),

    // POST /todos - Add a new todo (id is omitted because it's generated by the backend)
    addTodo: builder.mutation<Todo, Omit<Todo, "id">>({
      query: (todo) => ({
        url: "/todos",
        method: "POST",
        body: todo, // Payload to be sent in the body
      }),
      invalidatesTags: ["Todo"], // Invalidate the tag to trigger a refetch of todos
    }),

    // PUT /todos/:id - Update an existing todo
    updateTodo: builder.mutation<Todo, Todo>({
      query: (todo) => ({
        url: `/todos/${todo.id}`,
        method: "PUT",
        body: todo,
      }),
      invalidatesTags: ["Todo"], // Invalidate to keep UI in sync
    }),

    // DELETE /todos/:id - Delete a todo by ID
    deleteTodo: builder.mutation<void, number>({
      query: (id) => ({
        url: `/todos/${id}`,
        method: "DELETE",
      }),
      invalidatesTags: ["Todo"], // Refetch todos after deletion
    }),
  }),
});

// Export auto-generated hooks for each endpoint to use in components
export const {
  useGetTodosQuery,
  useAddTodoMutation,
  useUpdateTodoMutation,
  useDeleteTodoMutation,
} = todoApi;
